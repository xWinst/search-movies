{"version":3,"file":"static/js/168.374e3b9b.chunk.js","mappings":"kOACA,EAAuB,sBAAvB,EAAqD,uB,SC4ErD,EArEgB,WACd,OAA8BA,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,IAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAJY,wCAWpB,sGAEIH,GAAa,GACbE,EAAS,IAHb,SAK2BG,EAAAA,EAAAA,kBAA0BF,GALrD,YAKUG,EALV,QAOiBC,GAPjB,iCAQ4BD,EAASE,OARrC,UAUoC,KAFxBX,EARZ,QAUkBY,cAVlB,kCAWcC,QAAQC,OACZ,IAAIC,MAAJ,8CAZV,iDAiBMd,EAAWD,EAAQgB,SAjBzB,4CAqBUH,QAAQC,OACZ,IAAIC,MAAJ,8CAtBN,oEA0BIE,QAAQC,IAAR,MACAb,EAAS,KAAMc,SA3BnB,yBA6BIhB,GAAa,GA7BjB,8EAXoB,uBAKpBiB,EAAAA,EAAAA,YAAU,WACHd,GANa,mCAOlBe,KAEC,IAmCH,IAAMC,GAAepB,GAAaF,EAElC,OACE,2BACGI,IAAS,uBAAIA,IACbF,IAAa,wCAEboB,IACC,wBACGtB,EAAQuB,KAAI,SAAAC,GAAI,OACf,gBAAkBC,UAAWC,EAA7B,WACE,gBAAID,UAAWC,EAAf,qBAAiCF,EAAKG,WACtC,uBAAIH,EAAKI,YAFFJ,EAAKK","sources":["webpack://search-movies/./src/components/Reviews/Reviews.module.css?7248","components/Reviews/Reviews.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Reviews_item__DJKij\",\"title\":\"Reviews_title__t265C\"};","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport PropTypes from 'prop-types';\n\nimport { UserAPI } from '../../services/api';\nimport s from './Reviews.module.css';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const { movieId } = useParams();\n  useEffect(() => {\n    if (!movieId) return;\n    fetchMovieReviews();\n    // eslint-disable-next-line\n  }, []);\n\n  async function fetchMovieReviews() {\n    try {\n      setIsLoading(true);\n      setError('');\n\n      const response = await UserAPI.fetchMovieReviews(movieId);\n\n      if (response.ok) {\n        const reviews = await response.json();\n\n        if (reviews.total_results === 0) {\n          await Promise.reject(\n            new Error(`We don't have any reviews for this movie.`)\n          );\n          return;\n        }\n\n        setReviews(reviews.results);\n        return;\n      }\n\n      await Promise.reject(\n        new Error(`We don't have any reviews for this movie.`)\n      );\n      return;\n    } catch (error) {\n      console.log(error);\n      setError(error.message);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  const showReviews = !isLoading && reviews;\n\n  return (\n    <div>\n      {error && <p>{error}</p>}\n      {isLoading && <div>Loading...</div>}\n\n      {showReviews && (\n        <ul>\n          {reviews.map(item => (\n            <li key={item.id} className={s.item}>\n              <h3 className={s.title}>Author: {item.author}</h3>\n              <p>{item.content}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nReviews.propTypes = {\n  movieId: PropTypes.string.isRequired,\n};\n\nexport default Reviews;\n"],"names":["useState","reviews","setReviews","isLoading","setIsLoading","error","setError","movieId","useParams","UserAPI","response","ok","json","total_results","Promise","reject","Error","results","console","log","message","useEffect","fetchMovieReviews","showReviews","map","item","className","s","author","content","id"],"sourceRoot":""}