{"version":3,"file":"static/js/76.bf7afd2b.chunk.js","mappings":"gOACA,EAAuB,mBAAvB,EAAkD,oBAAlD,EAA6E,mB,SCwE7E,EAlEa,WACX,OAAwBA,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,IAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAJS,wCAWjB,sGAEIH,GAAa,GACbE,EAAS,IAHb,SAK0BG,EAAAA,EAAAA,eAAuBF,GALjD,YAKUG,EALV,QAOgBC,GAPhB,iCAQyBD,EAAQE,OARjC,cAQYX,EARZ,OASMC,EAAQD,EAAKA,MATnB,4CAaUY,QAAQC,OAAO,IAAIC,MAAJ,sBAbzB,oEAgBIC,QAAQC,IAAR,MACAX,EAAS,KAAMY,SAjBnB,yBAmBId,GAAa,GAnBjB,8EAXiB,uBAKjBe,EAAAA,EAAAA,YAAU,WACHZ,GANU,mCAOfa,KAEC,IAyBH,IAAMC,GAAYlB,GAAaF,EAE/B,OACE,2BACGI,IAAS,qCAAaA,KACtBF,IAAa,wCAEbkB,IACC,eAAIC,UAAWC,EAAf,SACGtB,EAAKuB,KAAI,SAAAC,GAAI,OACZ,0BACGA,EAAKC,eACJ,gBACEC,IAAG,yCAAoCF,EAAKC,cAC5CE,IAAKH,EAAKI,KACVP,UAAWC,KAGf,eAAID,UAAWC,EAAf,SAAwBE,EAAKI,QAC7B,uCAAeJ,EAAKK,eATbL,EAAKM","sources":["webpack://search-movies/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"Cast_list__GlWio\",\"photo\":\"Cast_photo__lvFLf\",\"name\":\"Cast_name__6UbFm\"};","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { UserAPI } from '../../services/api';\nimport s from './Cast.module.css';\n\nconst Cast = () => {\n  const [cast, setCast] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const { movieId } = useParams();\n  useEffect(() => {\n    if (!movieId) return;\n    fetchMovieCast();\n    // eslint-disable-next-line\n  }, []);\n\n  async function fetchMovieCast() {\n    try {\n      setIsLoading(true);\n      setError('');\n\n      const reviews = await UserAPI.fetchMovieCast(movieId);\n\n      if (reviews.ok) {\n        const cast = await reviews.json();\n        setCast(cast.cast);\n        return;\n      }\n\n      await Promise.reject(new Error(`Cast is not found`));\n      return;\n    } catch (error) {\n      console.log(error);\n      setError(error.message);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  const showCast = !isLoading && cast;\n\n  return (\n    <div>\n      {error && <div>Error: {error}</div>}\n      {isLoading && <div>Loading...</div>}\n\n      {showCast && (\n        <ul className={s.list}>\n          {cast.map(item => (\n            <li key={item.id}>\n              {item.profile_path && (\n                <img\n                  src={`https://image.tmdb.org/t/p/w500${item.profile_path}`}\n                  alt={item.name}\n                  className={s.photo}\n                />\n              )}\n              <h3 className={s.name}>{item.name}</h3>\n              <p>Character: {item.character}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nCast.propTypes = {\n  movieId: PropTypes.string.isRequired,\n};\n\nexport default Cast;\n"],"names":["useState","cast","setCast","isLoading","setIsLoading","error","setError","movieId","useParams","UserAPI","reviews","ok","json","Promise","reject","Error","console","log","message","useEffect","fetchMovieCast","showCast","className","s","map","item","profile_path","src","alt","name","character","id"],"sourceRoot":""}